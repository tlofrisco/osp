/**
 * üîÑ Temporal Cloud Client Configuration for OSP
 * 
 * Handles connection to Temporal Cloud with multi-namespace support for service isolation.
 * Each OSP service gets its own Temporal namespace for workflow isolation.
 */

import { Client, Connection } from '@temporalio/client';
import { TLSConfig } from '@temporalio/client';

// Environment configuration
const TEMPORAL_CLOUD_ENDPOINT = process.env.TEMPORAL_CLOUD_ENDPOINT || 'your-namespace.tmprl.cloud:7233';
const TEMPORAL_CLOUD_NAMESPACE = process.env.TEMPORAL_CLOUD_NAMESPACE || 'your-namespace';
const TEMPORAL_CLOUD_CERT_PATH = process.env.TEMPORAL_CLOUD_CERT_PATH;
const TEMPORAL_CLOUD_KEY_PATH = process.env.TEMPORAL_CLOUD_KEY_PATH;

// Connection cache for efficiency
const connectionCache = new Map<string, Connection>();
const clientCache = new Map<string, Client>();

/**
 * Create a TLS connection to Temporal Cloud
 */
async function createTemporalConnection(): Promise<Connection> {
  const cacheKey = 'default';
  
  if (connectionCache.has(cacheKey)) {
    return connectionCache.get(cacheKey)!;
  }

  let tls: TLSConfig | undefined;
  
  // For Temporal Cloud, we need TLS configuration
  if (TEMPORAL_CLOUD_CERT_PATH && TEMPORAL_CLOUD_KEY_PATH) {
    const fs = await import('fs');
    tls = {
      clientCertPair: {
        crt: fs.readFileSync(TEMPORAL_CLOUD_CERT_PATH),
        key: fs.readFileSync(TEMPORAL_CLOUD_KEY_PATH),
      },
    };
  }

  const connection = await Connection.connect({
    address: TEMPORAL_CLOUD_ENDPOINT,
    tls,
  });

  connectionCache.set(cacheKey, connection);
  return connection;
}

/**
 * Create a Temporal client for a specific namespace (service)
 */
export async function createTemporalClient(namespace?: string): Promise<Client> {
  const targetNamespace = namespace || TEMPORAL_CLOUD_NAMESPACE;
  
  if (clientCache.has(targetNamespace)) {
    return clientCache.get(targetNamespace)!;
  }

  const connection = await createTemporalConnection();
  
  const client = new Client({
    connection,
    namespace: targetNamespace,
  });

  clientCache.set(targetNamespace, client);
  return client;
}

/**
 * Generate a Temporal namespace name for an OSP service
 */
export function generateNamespace(serviceSchema: string): string {
  // Temporal namespace naming rules: alphanumeric, hyphens, max 64 chars
  const namespace = `osp-${serviceSchema}`
    .toLowerCase()
    .replace(/[^a-z0-9-]/g, '-')
    .replace(/-+/g, '-')
    .slice(0, 60); // Leave room for potential suffix
    
  return namespace;
}

/**
 * Generate task queue name for a service
 */
export function generateTaskQueue(serviceSchema: string): string {
  return `${serviceSchema}-tasks`;
}

/**
 * Create namespace for a new OSP service
 * Note: Temporal Cloud namespaces are managed via their web console or CLI
 * For now, we'll use a single namespace with service prefixes in workflow IDs
 */
export async function ensureServiceNamespace(serviceSchema: string): Promise<string> {
  // For Phase 1, we'll use a single namespace with service prefixes
  // Later, we can implement proper namespace creation via Temporal Cloud API
  const namespace = TEMPORAL_CLOUD_NAMESPACE;
  
  // TODO: Implement actual namespace creation when Temporal Cloud API supports it
  console.log(`üìã Service ${serviceSchema} will use namespace: ${namespace}`);
  
  return namespace;
}

/**
 * Get the OSP core namespace for platform workflows
 */
export function getOSPCoreNamespace(): string {
  return TEMPORAL_CLOUD_NAMESPACE;
}

/**
 * Health check for Temporal connection
 */
export async function checkTemporalHealth(): Promise<boolean> {
  try {
    const client = await createTemporalClient();
    // Simple health check - list workflows (will fail if connection is bad)
    await client.workflow.list();
    return true;
  } catch (error) {
    console.error('‚ùå Temporal health check failed:', error);
    return false;
  }
}

/**
 * Close all connections (for cleanup)
 */
export async function closeTemporalConnections(): Promise<void> {
  for (const connection of connectionCache.values()) {
    connection.close();
  }
  connectionCache.clear();
  clientCache.clear();
} 