/**
 * ðŸ”§ Temporal Activities for OSP Workers
 */

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

// Create Supabase client
const supabase = createClient(
  process.env.PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// Activity: Create Entity (using RPC pattern)
export async function createEntity(input) {
  console.log('ðŸ”„ Creating entity with input:', input);
  
  const entityName = 'reservation';
  const serviceSchema = input.serviceSchema;
  if (!serviceSchema) {
    throw new Error('serviceSchema is required - must be provided by manifest');
  }
  
  // Generate entity data
  const entityData = {
    id: `reservation_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    customer_name: input.customer_name || 'Test Customer ' + Date.now(),
    phone_number: input.phone_number || '555-' + Math.floor(Math.random() * 10000).toString().padStart(4, '0'),
    reservation_date: input.reservation_date || new Date().toISOString(),
    reservation_time: input.reservation_time || '19:00',
    party_size: input.party_size || 2,
    table_number: input.table_number || Math.floor(Math.random() * 20) + 1,
    status: 'pending',
    workflow_state: 'created',
    special_requests: input.special_requests || 'Generated by Temporal workflow',
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  };
  
  console.log(`ðŸ’¾ Creating ${entityName} in schema ${serviceSchema}:`, entityData);
  
  // Use RPC to insert
  const { data, error } = await supabase.rpc('insert_into_dynamic_table', {
    in_schema_name: serviceSchema,
    in_table_name: entityName,
    json_data: entityData
  });
  
  if (error) {
    console.error(`Failed to create ${entityName}:`, error);
    throw new Error(`Failed to create ${entityName}: ${error.message}`);
  }
  
  console.log(`âœ… Created ${entityName} via RPC:`, data);
  return { success: true, entityId: entityData.id, data: entityData };
} 